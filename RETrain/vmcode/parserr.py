vmcode = [  0xDC, 0x00, 0x00, 0x00, 0x28, 0x00, 0xBD, 0x03, 0x0F, 0x00, 
            0x13, 0x51, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x02, 0x00, 0xB7, 
            0x02, 0x2E, 0x00, 0x29, 0x02, 0x0F, 0x00, 0x6D, 0x30, 0x18, 
            0x33, 0x01, 0xDC, 0x00, 0x04, 0x00, 0xB7, 0x02, 0x0B, 0x00, 
            0x29, 0x02, 0x0F, 0x00, 0x6F, 0x33, 0x18, 0x33, 0x01, 0xDC, 
            0x00, 0x06, 0x00, 0x28, 0x00, 0x69, 0x03, 0x0F, 0x00, 0xC8, 
            0x34, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x08, 0x00, 0xB7, 0x02, 
            0x2B, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x57, 0x00, 0x29, 0x02, 
            0x0F, 0x00, 0x0F, 0x5F, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x0A, 
            0x00, 0xB7, 0x02, 0x61, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x61, 
            0x00, 0x29, 0x02, 0xB7, 0x02, 0x40, 0x00, 0x29, 0x02, 0x0F, 
            0x00, 0x23, 0x68, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x0C, 0x00, 
            0xFB, 0x00, 0x4F, 0x03, 0x0F, 0x00, 0xE5, 0x2D, 0x18, 0x33, 
            0x01, 0xDC, 0x00, 0x0E, 0x00, 0xB7, 0x02, 0x46, 0x00, 0x29, 
            0x02, 0x0F, 0x00, 0x77, 0x33, 0x18, 0x33, 0x01, 0xDC, 0x00, 
            0x10, 0x00, 0xB7, 0x02, 0x1F, 0x00, 0x29, 0x02, 0xB7, 0x02, 
            0x1C, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x26, 0x00, 0x29, 0x02, 
            0x0F, 0x00, 0x4B, 0x39, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x12, 
            0x00, 0xB7, 0x02, 0x0F, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x57, 
            0x00, 0x29, 0x02, 0xB7, 0x02, 0x3F, 0x00, 0x29, 0x02, 0x0F, 
            0x00, 0x54, 0x5F, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x14, 0x00, 
            0xB7, 0x02, 0x37, 0x00, 0x29, 0x02, 0xB7, 0x02, 0x58, 0x00, 
            0x29, 0x02, 0xB7, 0x02, 0x4C, 0x00, 0x29, 0x02, 0x0F, 0x00, 
            0x41, 0x31, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x16, 0x00, 0xB7, 
            0x02, 0x24, 0x00, 0x29, 0x02, 0x0F, 0x00, 0x1D, 0x5F, 0x18, 
            0x33, 0x01, 0xDC, 0x00, 0x18, 0x00, 0xB7, 0x02, 0x1A, 0x00, 
            0x29, 0x02, 0xB7, 0x02, 0x1C, 0x00, 0x29, 0x02, 0x0F, 0x00, 
            0x6E, 0x34, 0x18, 0x33, 0x01, 0xDC, 0x00, 0x1A, 0x00, 0xFB, 
            0x00, 0x80, 0x03, 0x0F, 0x00, 0xEE, 0x60, 0x18, 0x33, 0x01, 
            0xDC, 0x00, 0x1C, 0x00, 0xFB, 0x00, 0x09, 0x01, 0x0F, 0x00, 
            0x6A, 0x20, 0x18, 0x33, 0x01, 0x34, 0xCE, 0x50, 0xCE]

Key = [0xb7,0x4e,0xdc,0x67,0x96,0xc,0x28,0x6a,0xfb,0xff,0x5d,
        0x6c,0x2e,0x5f,0xb,0x63,0x57,0x1,0x29,0x4a,0x8f,0x25,
        0x72,0x83,0x39,0x9f,0xfa,0x58,0x3e,0x10,0x59,0xf,0x55,
        0x5,0xab,0x14,0x4f,0x54,0xbd,0x27,0xd,0x18,0x87,0x1d,
        0xf9,0xce,0x50,0x34]

FuncNames = ['MOVI','MOVR','LODI','LODR','STRI','STRR','ADDI','ADDR','SUBI','SUBR','ANDB','ANDW','ANDR','YORB','YORW','YORR','XORB','XORW','XORR','NOTR','MULI','MULR','DIVI','DIVR','SHLI','SHLR','SHRI','SHRR','PUSH','POOP','CMPB','CMPW','CMPR','JMPI','JMPR','JPAI','JPAR','JPBI','JPBR','JPEI','JPER','JPNI','JPNR','CALL','RETN','SHIT','NOPE','GRMN']

jmpstep = [0x4,0x2,0x4,0x2,0x4,0x2,0x4,0x2,0x4,0x2,0x3,0x4,0x2,0x3,0x4,0x2,0x3,0x4,0x2,0x2,0x4,0x2,0x4,0x2,0x4,0x2,0x4,0x2,0x2,0x2,0x3,0x4,0x2,0x3,0x2,0x3,0x2,0x3,0x2,0x3,0x2,0x3,0x2,0x3,0x1,0x1,0x1,0x1]

ord = []
stp = []
flag = []
strinput = [0]*48
step = 0
while step < len(vmcode):
    count = 0
    while count <= 48 :
        if  vmcode [step] == Key[count]:
            ord.append(FuncNames[count])
            stp.append(step)
            step += jmpstep[count]
            break
        count +=1
i =0
while i < (len(ord)-4):
    if ord[i] == 'LODI':

        if ord[i+1] == 'ADDI':
            cipher =  (((vmcode[stp[i+2]+3]&0xff)<<8)&0xffff) + vmcode[stp[i+2]+2]
            this2 =   (((vmcode[stp[i+1]+3]&0xff)<<8)&0xffff) + vmcode[stp[i+1]+2]
            result = cipher - this2
            flag.append(chr(result&0x00ff))
            flag.append(chr((result&0xff00)>>8))
            i += 4
        elif  ord[i+1] == 'MOVI':
            if ord[i+5] == 'MOVI':
                cipher =  (((vmcode[stp[i+7]+3]&0xff)<<8)&0xffff) + vmcode[stp[i+7]+2]
                this2 = vmcode[stp[i+5]+2]&0xff
                result = cipher ^ this2
                this2 = vmcode[stp[i+3]+2]&0xff
                result ^= this2
                this2 = vmcode[stp[i+1]+2]&0xff
                result ^= this2
                flag.append(chr(result&0x00ff))
                flag.append(chr((result&0xff00)>>8))
                i+= 9
            elif ord[i+3] == 'MOVI':
                cipher =  (((vmcode[stp[i+5]+3]&0xff)<<8)&0xffff) + vmcode[stp[i+5]+2]
                this2 = vmcode[stp[i+3]+2]&0xff
                result = cipher ^ this2
                this2 = vmcode[stp[i+1]+2]&0xff
                result ^= this2
                flag.append(chr(result&0x00ff))
                flag.append(chr((result&0xff00)>>8))
                i+= 7
            else:
                cipher =  (((vmcode[stp[i+3]+3]&0xff)<<8)&0xffff) + vmcode[stp[i+3]+2]
                this2 = vmcode[stp[i+1]+2]&0xff
                result = cipher ^ this2
                flag.append(chr(result&0x00ff))
                flag.append(chr((result&0xff00)>>8))
                i += 5
        elif ord[i+1] == 'SUBI':
            cipher =  (((vmcode[stp[i+2]+3]&0xff)<<8)&0xffff) + vmcode[stp[i+2]+2]
            this2 =   (((vmcode[stp[i+1]+3]&0xff)<<8)&0xffff) + vmcode[stp[i+1]+2]
            result = cipher + this2
            flag.append(chr(result&0x00ff))
            flag.append(chr((result&0xff00)>>8))
            i += 4

for i in flag:
    print(i,end="")

    




