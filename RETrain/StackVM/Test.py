afv32=[ 0x00, 0x06, 0x00, 0x01, 0x01, 0x06, 0x0C, 0x0D, 0x01, 0x06, 
  0x00, 0x08, 0x01, 0x05, 0x01, 0x06, 0x22, 0x38, 0x01, 0x06, 
  0xFF, 0x00, 0x01, 0x08, 0x01, 0x02, 0x01, 0x06, 0x61, 0x61, 
  0x01, 0x01, 0x01, 0x06, 0x69, 0x4E, 0x01, 0x00, 0x00, 0x07, 
  0x00, 0x00, 0x01, 0x06, 0x0C, 0x0D, 0x01, 0x06, 0x2D, 0x41, 
  0x01, 0x02, 0x01, 0x06, 0x00, 0x08, 0x01, 0x05, 0x01, 0x06, 
  0x22, 0x38, 0x01, 0x06, 0x55, 0x22, 0x01, 0x01, 0x01, 0x06, 
  0xFF, 0x00, 0x01, 0x08, 0x01, 0x02, 0x01, 0x06, 0x61, 0x61, 
  0x01, 0x01, 0x01, 0x06, 0x32, 0x6A, 0x01, 0x00, 0x00, 0x07, 
  0x00, 0x00, 0x01, 0x06, 0x49, 0x30, 0x01, 0x06, 0x00, 0x08, 
  0x01, 0x05, 0x01, 0x06, 0x3E, 0x5E, 0x01, 0x06, 0xFF, 0x00, 
  0x01, 0x08, 0x01, 0x02, 0x01, 0x06, 0x61, 0x61, 0x01, 0x01, 
  0x01, 0x06, 0x45, 0x0A, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 
  0x01, 0x06, 0x3B, 0x20, 0x01, 0x06, 0x00, 0x08, 0x01, 0x05, 
  0x01, 0x06, 0x6B, 0x2D, 0x01, 0x06, 0xFF, 0x00, 0x01, 0x08, 
  0x01, 0x02, 0x01, 0x06, 0x61, 0x61, 0x01, 0x01, 0x01, 0x06, 
  0x5B, 0x78, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x06, 
  0x2B, 0x79, 0x01, 0x06, 0x00, 0x08, 0x01, 0x05, 0x01, 0x06, 
  0x70, 0x41, 0x01, 0x06, 0xFF, 0x00, 0x01, 0x08, 0x01, 0x02, 
  0x01, 0x06, 0x61, 0x61, 0x01, 0x01, 0x01, 0x06, 0x37, 0x45, 
  0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x06, 0x78, 0x79, 
  0x01, 0x06, 0x00, 0x08, 0x01, 0x05, 0x01, 0x06, 0x34, 0x41, 
  0x01, 0x06, 0xFF, 0x00, 0x01, 0x08, 0x01, 0x02, 0x01, 0x06, 
  0x61, 0x61, 0x01, 0x01, 0x01, 0x06, 0x55, 0x0A, 0x01, 0x00, 
  0x00, 0x07, 0x00, 0x00, 0x01, 0x06, 0x6A, 0x36, 0x01, 0x06, 
  0x00, 0x08, 0x01, 0x05, 0x01, 0x06, 0x2D, 0x01, 0x01, 0x06, 
  0xFF, 0x00, 0x01, 0x08, 0x01, 0x02, 0x01, 0x06, 0x61, 0x61, 
  0x01, 0x01, 0x01, 0x06, 0x58, 0x1E, 0x01, 0x00, 0x00, 0x07, 
  0x00, 0x00, 0x01, 0x06, 0x75, 0x1B, 0x01, 0x06, 0x00, 0x08, 
  0x01, 0x05, 0x01, 0x06, 0x3B, 0x17, 0x01, 0x06, 0xFF, 0x00, 
  0x01, 0x08, 0x01, 0x02, 0x01, 0x06, 0x61, 0x61, 0x01, 0x01, 
  0x01, 0x06, 0x0F, 0x19, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 
  0x01, 0x06, 0x77, 0x7C, 0x01, 0x06, 0x00, 0x08, 0x01, 0x05, 
  0x01, 0x06, 0x45, 0x30, 0x01, 0x06, 0xFF, 0x00, 0x01, 0x08, 
  0x01, 0x02, 0x01, 0x06, 0x61, 0x61, 0x01, 0x01, 0x01, 0x06, 
  0x76, 0x03, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x06, 
  0x0F, 0x37, 0x01, 0x06, 0x00, 0x08, 0x01, 0x04, 0x01, 0x06, 
  0x3B, 0x23, 0x01, 0x06, 0x00, 0xFF, 0x01, 0x08, 0x01, 0x02, 
  0x01, 0x06, 0x61, 0x61, 0x01, 0x01, 0x01, 0x06, 0x4A, 0x12, 
  0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0xF6, 0x7F, 0x00, 0x00, 
  0x53, 0x40, 0x41, 0x84, 0x19, 0x08, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00]
c = 0
b =0
count1 =0
v11= 0
buffer=[0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf0,0xf1,0xf2,0xf3]
w = [28, 29, 78, 79, 116, 117, 154, 155, 192, 193, 230, 231, 268, 269, 306, 307, 344, 345, 382, 383]
for o in range (10):
    afv32[w[o*2+1]] = buffer[o*2]
    afv32[w[o*2]] = buffer[o*2+1]

for u in range(len(buffer)):
    buffer[u] = 100 + u
result =[0]*100
v12 = 0x5300
def case(a):
    global c
    temp0 =0
    temp1 =0
    match a:
        case 0:
            
            if buffer[0]== 1:
               print("0CMP {}, {} ".format(hex(result[c-4]),hex(result[c-2])) )
               print("0CMP {}, {} ".format(hex(result[c-3]),hex(result[c-1])) )
               (result[c-4]) = (result[c-4]) == (result[c-2])
               (result[c-3]) = (result[c-3]) == (result[c-1])
               c-=2
            else:
               print("0CMP {},{} ".format(hex(result[c-1]),hex(result[c-2])) )
               (result[c-2]) = (result[c-1]) == (result[c-2])
               c-=1
            print("\n")
        case 1:
            if buffer[0]== 1:
                print("1XOR {},{} ".format(hex(result[c-4]),hex(result[c-2])) )
                print("1XOR {},{} ".format(hex(result[c-3]),hex(result[c-1])) )
                (result[c-4]) ^= (result[c-2])
                (result[c-3]) ^= (result[c-1])
                c-=2
            else:
               print("1XOR {},{} ".format(hex(result[c-2]),hex(result[c-1])) )
               (result[c-2]) ^= (result[c-1]) 
               c-=1
        case 2:
            if buffer[0]== 1:
                print("2ADD {},{} ".format(hex(temp0),hex(temp1)) )
                
                temp0 = (result[c-3]<<8) + (result[c-4])
                temp1 = (result[c-1]<<8) + (result[c-2])
                temp0 += temp1
                result[c-4] = temp0 & 0xff
                result[c-3] = (temp0 & 0xff00) >> 8
                c-=2
            else:
                print("2ADD {},{} ".format(hex(result[c-2]),hex(result[c-1])) )
                result[c-2] += result[c-1]
                c-=1
        case 4:
            if buffer[0]==1:
                print("4SHL {},{} ".format(hex(temp0),hex(temp1)) )
                temp0 = (result[c-3]<<8) + (result[c-4])
                temp1 = (result[c-1]<<8) + (result[c-2])
                temp0 <<= temp1
                result[c-4] = temp0 & 0xff
                result[c-3] = (temp0 & 0xff00) >> 8
                c-=2
            else:
                print("4SHL {},{} ".format(hex(result[c-2]),hex(result[c-1])) )
                result[c-2] <<= result[c-1]
                c-= 1
        case 5:
            if buffer[0]==1:
                print("5SHR {},{} ".format(hex(temp0),hex(temp1)) )
                temp0 = (result[c-3]<<8) + (result[c-4])
                temp1 = (result[c-1]<<8) + (result[c-2])
                temp0 >>= temp1
                result[c-4] = temp0 & 0xff
                result[c-3] = (temp0 & 0xff00) >> 8
                c-=2
            else:
                print("5SHR {},{} ".format(hex(result[c-2]),hex(result[c-1])) )
                result[c-2] >>= result[c-1]
                c-= 1

        case 6:
            if buffer[0]== 1:
               print("6MOV {},{} ".format(hex(result[c]),hex(buffer[8])) )
               print("6MOV {},{} ".format(hex(result[c+1]),hex(buffer[9])) )
               result[c]=buffer[8]
               result[c+1]=buffer[9]
               c += 2

            else:
                print("6MOV {},{} ".format(hex(result[c]),hex(buffer[8])) )
                result[c]=buffer[8]
                c +=1
        case 7:
            if buffer[0]== 1:
               c -= 2
            else:
                c -=1
        case 8:
            if buffer[0]==1:
                print("8AND {},{} ".format(hex(result[c-4]),hex(result[c-2])) )
                print("8AND {},{} ".format(hex(result[c-3]),hex(result[c-1])) )
                result[c-4] &= result[c-2]
                result[c-3] &= result[c-1]
                c-=2
            else:
                print("8SHL {},{} ".format(hex(result[c-2]),hex(result[c-1])) )
                result[c-2] <<= result[c-1]
                c -=1


def bf (count, num,times):
    while times !=-1:
        buffer[count]= (num & (0xff<<(8*times)))>>(8*times)
        count +=1
        times -=1
addrmaloc= 0x928372
while count1 < 0x18C:
    if afv32[count1 + 1] == 6:
        buffer[0]= afv32[count1]
        bf(1,addrmaloc,2)
        
        buffer[4]= afv32[count1 + 1] 
        bf(5,000000,2)
        v11 = (afv32[count1 + 3]<<0x8)+(afv32[count1 + 2])
        bf(8,v11,1)
        
        bf(10,v12,1)
        count1 +=4
    else:   
        buffer[0]= afv32[count1]
        bf(1,0x006B00,2)
        buffer[4]= afv32[count1+1]
        bf(5,000000,2)
        bf(8,0x00006500,3)
        
        count1+=2

    # print("Buffer:")
    # for i in buffer:
    #     print (hex(i))
    case(buffer[4])
    
    # if(b<c):
    #     b=c
    # print("Result:")
    # for o in range(b):
    #     print (hex(result[o]))
        

